name: Semantic Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Use Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test
      
    - name: Semantic Release
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npx semantic-release

  build-and-upload:
    needs: release
    if: needs.release.outputs.new-release-published == 'true'
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            artifact_name: 'snippet-vault-macos-x64'
            artifact_path: 'out/make/zip/darwin/x64/*.zip'
            asset_name: 'snippet-vault-macos-x64.zip'
            content_type: 'application/zip'
          - os: ubuntu-latest
            artifact_name: 'snippet-vault-linux-x64'
            artifact_path: 'out/make/deb/x64/*.deb'
            asset_name: 'snippet-vault-linux-x64.deb'
            content_type: 'application/vnd.debian.binary-package'
          - os: windows-latest
            artifact_name: 'snippet-vault-windows-x64'
            artifact_path: 'out/make/squirrel.windows/x64/*.exe'
            asset_name: 'snippet-vault-windows-x64-setup.exe'
            content_type: 'application/octet-stream'

    steps:
    - uses: actions/checkout@v4
      
    - name: Use Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci

    # Skip model download during build to reduce installer size
    # Models will be downloaded on first run instead
    # - name: Download models (required for offline operation)
    #   run: npm run download-models

    - name: Build application
      run: npm run build

    - name: Package application
      run: npm run make
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Disable code signing for CI builds
        CSC_IDENTITY_AUTO_DISCOVERY: false

    - name: Get release upload URL
      id: get_release
      uses: actions/github-script@v7
      with:
        script: |
          const { data: release } = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: 'v${{ needs.release.outputs.new-release-version }}'
          });
          core.setOutput('upload_url', release.upload_url);

    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ${{ matrix.artifact_path }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: ${{ matrix.content_type }}
