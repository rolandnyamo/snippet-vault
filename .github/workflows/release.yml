name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            artifact_name: 'Snippet Vault-darwin-universal'
            artifact_path: 'out/make/zip/darwin/universal/*.zip'
            platform: darwin
            arch: universal
          - os: ubuntu-latest
            artifact_name: 'snippet-vault-linux'
            artifact_path: 'out/make/deb/x64/*.deb'
            platform: linux
            arch: x64
          - os: windows-latest
            artifact_name: 'snippet-vault-win32-setup'
            artifact_path: 'out/make/squirrel.windows/x64/*.exe'
            platform: win32
            arch: x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download models (required for offline operation)
        run: npm run download-models

      - name: Build application
        run: npm run build

      - name: Package application
        run: npm run make
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List build output (debug)
        run: |
          echo "Build output structure:"
          find out -type f -name "*.zip" -o -name "*.exe" -o -name "*.deb" -o -name "*.dmg" || echo "No build artifacts found"
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}
          retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List downloaded artifacts (debug)
        run: |
          echo "Downloaded artifacts:"
          find ./artifacts -type f
        shell: bash

      - name: Get version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Snippet Vault ${{ steps.version.outputs.version }}
          body: |
            ## Snippet Vault ${{ steps.version.outputs.version }}
            
            A lightweight, entirely-offline desktop utility for storing and semantically searching code snippets, Kusto queries, and URLs.
            
            ### Features
            - üîç **Intelligent Search**: Hybrid semantic + keyword search using TensorFlow.js Universal Sentence Encoder
            - üîí **100% Offline**: No data ever leaves your machine - all processing happens locally
            - üìÅ **Organized Storage**: Recent and All views with item count display
            - üóëÔ∏è **Item Management**: Add, edit, delete individual items or clear all data
            - üì§ **Export/Import**: Backup and restore your data in JSON or CSV format
            - üîÑ **Model Versioning**: Automatic embedding regeneration when models are updated
            
            ### Download Options
            
            **macOS (Universal - Intel & Apple Silicon)**
            - Download the `.zip` file below
            - Extract and move Snippet Vault.app to your Applications folder
            
            **Windows (x64)**
            - Download the `.exe` installer below
            - Run the installer to install Snippet Vault
            
            **Linux (x64)**
            - Download the `.deb` package below
            - Install with: `sudo dpkg -i snippet-vault-*.deb`
            
            ### Privacy & Security
            - All data stays on your local machine
            - No network calls or telemetry
            - Open source and auditable
            
            **Note**: This release is unsigned. You may need to override security warnings on macOS/Windows. Code signing will be added in future releases.
          draft: false
          prerelease: false

      - name: Upload macOS Universal Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/Snippet Vault-darwin-universal/Snippet Vault-darwin-universal-*.zip
          asset_name: snippet-vault-macos-universal.zip
          asset_content_type: application/zip

      - name: Upload Windows x64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/snippet-vault-win32-setup/SnippetVaultSetup.exe
          asset_name: snippet-vault-windows-x64-setup.exe
          asset_content_type: application/octet-stream

      - name: Upload Linux x64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/snippet-vault-linux/snippet-vault_*.deb
          asset_name: snippet-vault-linux-x64.deb
          asset_content_type: application/vnd.debian.binary-package
